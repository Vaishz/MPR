
package javaapplication2;

import java.awt.*;
import java.awt.event.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

class PERTTask {
    String name;
    int optimisticDuration;
    int mostLikelyDuration;
    int pessimisticDuration;
    double expected;
    double variance;
    double standardDeviation;

    PERTTask(String name, int optimisticDuration, int mostLikelyDuration, int pessimisticDuration) {
        this.name = name;
        this.optimisticDuration = optimisticDuration;
        this.mostLikelyDuration = mostLikelyDuration;
        this.pessimisticDuration = pessimisticDuration;

        calculatePERTValues();
    }

    private void calculatePERTValues() {
        expected = (optimisticDuration + 4 * mostLikelyDuration + pessimisticDuration) / 6.0;
        variance = ((pessimisticDuration - optimisticDuration) / 6.0) * ((pessimisticDuration - optimisticDuration) / 6.0);
        standardDeviation = Math.sqrt(variance);
    }
}

public class PERTCalculatorGUI1 extends Frame {
    private List<PERTTask> tasks;
    private double projectTime;
    private double projectVariance;
    private double projectStandardDeviation;

    private Panel inputPanel;
    private Panel outputPanel;
    private Button calculateButton;
    private Button clearButton;
    private TextArea outputTextArea;

    public PERTCalculatorGUI1() {
        tasks = new ArrayList<>();
        setTitle("PERT Calculator");
        setLayout(new BorderLayout());

        inputPanel = new Panel();
        inputPanel.setLayout(new GridLayout(0, 3));

        Label nameLabel = new Label("Task Name");
        Label optimisticLabel = new Label("Optimistic Duration");
        Label mostLikelyLabel = new Label("Most Likely Duration");
        Label pessimisticLabel = new Label("Pessimistic Duration");
        Label dependenciesLabel = new Label("Dependencies (comma-separated)");

        TextField nameField = new TextField();
        TextField optimisticField = new TextField();
        TextField mostLikelyField = new TextField();
        TextField pessimisticField = new TextField();
        TextField dependenciesField = new TextField();

        calculateButton = new Button("Calculate PERT");
        clearButton = new Button("Clear Screen");
        outputTextArea = new TextArea(10, 30);
        outputTextArea.setEditable(false);

        calculateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                int optimistic = Integer.parseInt(optimisticField.getText());
                int mostLikely = Integer.parseInt(mostLikelyField.getText());
                int pessimistic = Integer.parseInt(pessimisticField.getText());

                PERTTask task = new PERTTask(name, optimistic, mostLikely, pessimistic);
                tasks.add(task);

                calculatePERT();
            }
        });

        clearButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tasks.clear();
                projectTime = 0.0;
                projectVariance = 0.0;
                projectStandardDeviation = 0.0;
                outputTextArea.setText("");
                pessimisticField.setText("");
                optimisticField.setText("");
                mostLikelyField.setText("");
                nameField.setText("");
                dependenciesField.setText("");
            }
        });

        inputPanel.add(nameLabel);
        inputPanel.add(optimisticLabel);
        inputPanel.add(mostLikelyLabel);
        inputPanel.add(nameField);
        inputPanel.add(optimisticField);
        inputPanel.add(mostLikelyField);
        inputPanel.add(pessimisticLabel);
        inputPanel.add(dependenciesLabel);
        inputPanel.add(new Label(""));
        inputPanel.add(pessimisticField);
        inputPanel.add(dependenciesField);
        inputPanel.add(calculateButton);
        inputPanel.add(new Label(""));
        inputPanel.add(clearButton);

        outputPanel = new Panel();
        outputPanel.add(outputTextArea);

        add(inputPanel, BorderLayout.NORTH);
        add(outputPanel, BorderLayout.CENTER);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                dispose();
            }
        });

        setSize(500, 600);
        setResizable(false);
        setVisible(true);
    }

    private void calculatePERT() {
        double totalExpected = 0.0;
        double totalVariance = 0.0;

        for (PERTTask task : tasks) {
            double taskExpected = task.expected;
            double taskVariance = task.variance;

            totalExpected += taskExpected;
            totalVariance += taskVariance;
        }

        projectTime = totalExpected;
        projectVariance = totalVariance;
        projectStandardDeviation = Math.sqrt(totalVariance);

        displayPERTResults();
    }

    private void displayPERTResults() {
        DecimalFormat df = new DecimalFormat("#.##");

        outputTextArea.setText("PERT Project Time: " + df.format(projectTime) + "\n");
        outputTextArea.append("Variance of Total Project: " + df.format(projectVariance) + "\n");
        outputTextArea.append("Standard Deviation: " + df.format(projectStandardDeviation) + "\n");
        outputTextArea.append("Probability of Completion:\n");

        for (PERTTask task : tasks) {
            double probability = calculateProbability(task.expected, task.variance);
            outputTextArea.append(task.name + ": " + df.format(probability) + "\n");
        }
    }

    private double calculateProbability(double expected, double variance) {
        double z = (projectTime - expected) / projectStandardDeviation;
        return 1 - cumulativeDistribution(z);
    }

    private double cumulativeDistribution(double z) {
        double t = 1 / (1 + 0.2316419 * Math.abs(z));
        double y = (((((1.330274429 * t - 1.821255978) * t + 1.781477937) * t - 0.356563782) * t + 0.319381530) * t / (2 * Math.PI)) + 0.5;

        if (z > 0) {
            return 1 - y;
        } else {
            return y;
        }
    }
}
    

    /*public static void main(String[] args) {
        new PERTCalculatorGUI1();
    }
}*/
